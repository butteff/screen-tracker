#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require_relative 'modules/iostream'
require_relative 'modules/views'
include Iostream
include Views

class Track < Thor
  desc 'status', 'Show the existing status of the app.'
  def status
    status = io_get_raw('status')&.first
    unless status['client_id'].nil?
      clients = io_get_raw('clients')
      tasks = io_get_raw('tasks', "client_id = #{status['client_id']}")
    end
    print_status(status, clients, tasks)
  end

  desc 'settings :PARAMS', "Show or Set existing App's settings."
  def settings(key = nil, value = nil)
    io_set_one('settings', key, value) if !key.nil? && !value.nil?
    io_get('settings')
  end

  desc 'clients', 'Show existing Clients.'
  def clients
    io_get('clients')
  end

  desc 'use CLIENT_ID', 'Select a client with the ID provided.'
  def use(client_id = nil)
    io_set_one('status', 'client_id', client_id) unless client_id.nil?
  end

  desc 'tasks', 'Show all the existing tasks of a selected client.'
  def tasks
    data = io_get_raw('status')&.first
    if !data['client_id'].nil?
      io_get('tasks', "client_id = #{data['client_id']}")
    else
      io_print('select_client_exception')
    end
  end

  desc 'pick :TASK_ID', 'Pick the task for any future manipulations.'
  def pick(task_id = nil)
    io_set_one('status', 'task_id', task_id) unless task_id.nil?
  end

  desc 'add :TEXT', 'Add a new task and its description to a selected client.'
  def add(task_name = nil)
    status = io_get_raw('status')&.first
    if !status['client_id'].nil?
      io_add_row('tasks', { client_id: status['client_id'], title: task_name })
    else
      io_print('add_task_exception')
    end
    tasks
  end

  desc 'del :TASK_ID', 'Delete a task with the ID provided.'
  def delete(task_id = nil)
    data = io_get_raw('status')&.first
    check = data ? io_get_raw('tasks', "id = #{task_id} AND client_id = #{data['client_id']}") : []
    if !check.empty?
      io_del_row('tasks', task_id)
    else
      io_print('remove_task_exception')
    end
    tasks
  end

  desc 'start', 'Start time tracking of a selected task.'
  def start
    status = io_get_raw('status')&.first
    settings = io_get_raw('settings')&.first
    logs = []
    if !status['client_id'].nil? && !status['task_id'].nil? && !settings['interval'].nil?
      while 1 do
        #char = STDIN.getc
        #break if char == 'q'
        sleep(settings['interval'].to_i)
        timestamp = Time.now.to_i.to_s
        file = false
        if settings['is_shot'] == 1
          file = 'screenshots/'+timestamp+'.png'
          cmd = 'gnome-screenshot --file='+file
          `#{cmd}`
        end
        log = {task_id: status['task_id'], client_id: status['client_id'], user_id: 1, timestamp: timestamp, screenshot: file}
        io_add_row('logs', log)
        p log
      end
    else
      io_print('start_logs_exception')
    end
  end

  desc 'logs :FULL', 'Show Logs of the selected task or full logs of all the client tasks.'
  def logs(_full = false)
    logs = io_get_raw('logs')
    p logs
  end

  desc 'stop', 'Stop active time tracking.'
  def stop
    puts '...'
  end

  desc 'login', 'Log in to the remote web interface.'
  def login
    puts '...'
  end

  desc 'logout', 'Log out from the remote web interface.'
  def logout
    puts '...'
  end

  desc 'push', 'Push logs or/and tasks to the remote web interface.'
  def push
    puts '...'
  end

  desc 'pull', 'Pull clients or/and tasks from the remote web interface.'
  def pull
    puts '...'
  end

end

Track.start(ARGV)
